package com.nickolasfisher.webflux.Reactive;

import com.nickolasfisher.webflux.Reactive.model.User;
import com.nickolasfisher.webflux.Reactive.repository.UserRepository;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.core.AutoConfigureCache;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebFlux;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.reactive.server.WebTestClient;
//import org.springframework.data.r2dbc.core.DatabaseClient;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertTrue;
@ExtendWith(SpringExtension.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@DirtiesContext
@AutoConfigureWebTestClient
@ActiveProfiles("Test")
@Slf4j
public class UserControllerTest {

    @Autowired
    private WebTestClient webTestClient;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    //private DatabseClient databseClient;

    private List<User> getData(){
        return Arrays.asList(new User(null,"xyz",30,10000),
         new User(null,"abcd",5,1000),
                new User(null,"cvsus",30,19099)
                );

    }

@BeforeEach
    public void setUp(){
        List<String> statments = Arrays.asList("Drop Table if Exists users;",
                "create Table users( id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name VARCHAR(100) NOT NULL, age integer,salary decimal);");


    //statments.forEach(it->databseClient.execute(it).fetch().rowsUpdated().block());

    userRepository.deleteAll().thenMany(Flux.fromIterable(getData())).
            flatMap(userRepository::save)
            .doOnNext(user->{System.out.println("User Inserted from UserControllerTest:"+user);})
            .blockLast();

}


@Test
    public void getAllUsersValidateCount(){

        webTestClient.get().uri("/users").exchange().
                expectStatus().
                isOk().
                expectHeader().
                contentType(MediaType.APPLICATION_JSON_VALUE).
                expectBodyList(User.class).hasSize(3).consumeWith(user->{
                    List<User> users = user.getResponseBody();
                    users.forEach(u->{
                        assertTrue(u.getId()!=null);
                    });
                });
            }

        @Test
        public void getAllUsersValidateResponse(){
        Flux<User> userFlux = webTestClient.get().uri("/users").
                exchange().
                expectStatus().
                isOk().expectHeader().contentType(MediaType.APPLICATION_JSON)
                .returnResult(User.class).getResponseBody();
                StepVerifier.create(userFlux.log("Receiving values!!"))
            .expectNextCount(3) .verifyComplete();
}

        @Test
        public void getUserById(){
            webTestClient.get().uri("/users".concat("/{userId}"),"1")
                .exchange().expectStatus()
                .isOk().expectBody()
                .jsonPath("$.name","cbsjw");
}
        @Test
        public void getUserById_NotFound(){
                webTestClient.get().uri("/users".concat("/{userId}"),"6").
                exchange().expectStatus().isNotFound();
}

    @Test
     public void createUser(){
        User user = new User(null,"Rahul",45,5555);
        webTestClient.post().uri("/users").
                contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE)).
                body(Mono.just(user),User.class).exchange().expectStatus().isCreated().expectBody().jsonPath("$.id").isNotEmpty().jsonPath("$.id")
                .isNotEmpty().jsonPath("$.id").isNotEmpty()
                .jsonPath("$.name").isEqualTo("Rahul");
}

    @Test
   public void deleteUser(){
        webTestClient.delete()
                .uri("/users".concat("/{userId}"),"1")
                .accept(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                .exchange().expectStatus().isOk()
                .expectBody(Void.class);
    }

    @Test
    public void updateUser(){
        double newSalary=12345;
        User user= new User(null,"Sam",31,newSalary);
        webTestClient.put().uri("/users".concat("/{userId}"),"1")
                .contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                .accept(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE)).
                body(Mono.just(user),User.class).exchange()
                .expectStatus().isOk().expectBody().jsonPath("$ salary").isEqualTo(newSalary);
    }

    @Test
    public void updateUser_notFound(){
        double newSalary = 12345;

        User user = new User(null,"sum Das",31,newSalary);
        webTestClient.put().uri("/users".concat("/{userId}"),"6")
                .contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE)).
                accept(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE)).body(Mono.just(user),User.class).exchange().expectStatus().isBadRequest();
    }

//    @Test
//    public void TestStreamUsers(){
//        setUpStreamingData();
//        Flux<UserCapped> userFlux = webTestClient.get().uri("/users/events").exchange()
//                .exceptSatatus.isOk().returnResult(UserCapped.class).getResponseBody().take(5);
//
//        StepVerifier.create(userFlux).expectNextCount(5).verifyComplete();
//    }

//    private void setUpStreamingData(){
//        mongoOperations.dropCollection(UserClapped.class);
//        mongoOperations.dropCollection(UserClapped.class, CollectionOptions.empty().maxDocuments(20).size(50000).capped());
//        Flux<UserCapped> userCappedFlux = Flux.interval(Duration.ofSeconds(1)).map(i->new UserCapped(null,"Stream User"+i,20,1000)).take(5);
//        userCappedRepository.insert(userCappedFlux).doOnNext(item->log.info("UserCapped Inserted from CommandLineRunner"+item)).blockLast();
//
//    }
}
